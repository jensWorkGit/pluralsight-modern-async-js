{"version":3,"sources":["callback.examples.js"],"names":[],"mappings":"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","file":"callback.examples.js","sourcesContent":["suite(\"Callback examples\");\r\n\r\ntest(\"Nesting serial async dependencies\", done => {\r\n\r\n  getCurrentCity(function (error, city) {\r\n\r\n    getWeather(city, function (error, weather) {\r\n\r\n      console.log(\"weather\", weather);\r\n      done();\r\n    });\r\n\r\n    console.log(`Weather for ${city}:`);\r\n  });\r\n\r\n});\r\n\r\ntest(\"Verbose, hard to reuse, easy to forget, additional error handling mechanism\", done => {\r\n\r\n  getCurrentCity(function (error, city) {\r\n    if (error) {\r\n      done(error);\r\n      return;\r\n    }\r\n\r\n    getWeather(city, function (error, weather) {\r\n      /*\r\n       if (error) {\r\n       done(error);\r\n       return;\r\n       }\r\n       */\r\n      console.log(\"weather\", weather);\r\n      done();\r\n    });\r\n\r\n    console.log(`Weather for ${city}:`);\r\n  });\r\n\r\n});\r\n\r\ntest(\"Seams rip across program\", function (done) {\r\n  let _city;\r\n  getCurrentCity((error, city) => _city = city);\r\n\r\n  getWeather(_city, function (error, city) {\r\n    if (error) {\r\n      done(error);\r\n      return;\r\n    }\r\n  });\r\n\r\n});\r\n\r\ntest(\"Results aren't easily reused\", function (done) {\r\n\r\n  // say I need to reuse something across my app, like a connection pool to a database.\r\n  // that pool has to be created and a connection opened, that's async\r\n  // I have to wait for all subsequent code with DB calls until this is done or I can have issues\r\n\r\n  getCurrentCity((error, city) => {\r\n\r\n    getWeather(city, (error, weather)=> {\r\n\r\n      console.log(weather);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  // later on, how can I use the current city again without re-fetching it?\r\n\r\n  getCurrentCity((error, city) => {\r\n\r\n    getForecast(city, (error, forecast) => {\r\n\r\n      console.log(forecast);\r\n\r\n      // brittle - gambling this happens last\r\n      done();\r\n\r\n    });\r\n\r\n  })\r\n\r\n});\r\n\r\ntest(\"Parallel result synchronization\", done => {\r\n\r\n  const city = \"NYC\";\r\n\r\n  let weatherData;\r\n  let forecastData;\r\n\r\n  getWeather(city, function (error, weather) {\r\n    weatherData = weather;\r\n    console.log(\"weather\", weather);\r\n    finishIfReady();\r\n  });\r\n\r\n  getForecast(city, function (error, forecast) {\r\n    forecastData = forecast;\r\n    console.log(\"forecast\", forecast);\r\n    finishIfReady();\r\n  });\r\n\r\n  function finishIfReady() {\r\n    if (weatherData && forecastData) {\r\n      // could add logic here to update UI all at once\r\n      console.log(\"both done!\");\r\n      done();\r\n      return;\r\n    }\r\n    console.log(\"not done yet\");\r\n  }\r\n\r\n});\r\n\r\ntest(\"Combined serial async dependencies and parallel result synchronization, with error handling\", done => {\r\n\r\n  getCurrentCity(function (error, city) {\r\n    if (error) {\r\n      return done(error);\r\n    }\r\n\r\n    let weatherData;\r\n    let forecastData;\r\n\r\n    getWeather(city, function (error, weather) {\r\n      if (error) {\r\n        return done(error);\r\n      }\r\n\r\n      weatherData = weather;\r\n      console.log(\"weather\", weather);\r\n      finishIfReady();\r\n    });\r\n\r\n    getForecast(city, function (error, forecast) {\r\n      if (error) {\r\n        return done(error);\r\n      }\r\n\r\n      forecastData = forecast;\r\n      console.log(\"forecast\", forecast);\r\n      finishIfReady();\r\n    });\r\n\r\n    function finishIfReady() {\r\n      if (weatherData && forecastData) {\r\n        // could add logic here to update UI all at once\r\n        console.log(\"both done!\");\r\n        done();\r\n        return;\r\n      }\r\n      console.log(\"not done yet\");\r\n    }\r\n\r\n    console.log(`Weather for ${city}:`);\r\n  });\r\n\r\n  /* \r\n   // What I would like this to look like\r\n   // - imagine `await` waits for an async operation to complete and then returns the result\r\n   // - `await` does this without blocking\r\n   // - `await` will throw any errors from the async operation \r\n\r\n   const city = await getCurrentCity();\r\n\r\n   // fire both requests in parallel, so I have to defer waiting for result\r\n   const weatherRequest = getWeather(city);\r\n   const forecastRequest = getForecast(city);\r\n\r\n   const weather = await weatherRequest;\r\n   console.log(\"weather\", weather); \r\n\r\n   const forecast = await forecastRequest; \r\n   console.log(\"forecast\", forecast); \r\n\r\n   done();\r\n\r\n   */\r\n\r\n});\r\n\r\n// note: more callback challenges can be done here, for example multiple callbacks\r\n"],"sourceRoot":"C:\\Programmierung\\Pluralsight\\pluralsight-modern-async-js\\es6"}